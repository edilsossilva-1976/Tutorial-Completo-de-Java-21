Instruções de fluxo de controle Java


Introdução
    Instruções de fluxo de controle são construções fundamentais em Java que determinam a ordem em que instruções e instruções são executadas. Essas instruções permitem 
implementar tomada de decisão, loops e ramificações em seus programas, permitindo que seu código responda dinamicamente a diferentes condições e entradas. Neste capítulo, 
forneceremos uma visão geral das instruções de fluxo de controle em Java, preparando o cenário para discussões mais detalhadas nos capítulos subsequentes.


Tipos de Instruções de Fluxo de Controle

    Java fornece diversas instruções de fluxo de controle que podem ser amplamente categorizadas em três tipos:

    1.  Instruções de Tomada de Decisão
    2.  Instruções de Looping
    3.  Instruções de Ramificação


    1. Instruções de Tomada de Decisão
        Instruções de tomada de decisão permitem que seu programa escolha entre diferentes caminhos de execução com base em determinadas condições. Estas incluem:

        Instrução if
            A instrução if executa um bloco de código se uma condição especificada for verdadeira.

            Exemplo:
            public class IfExample {
                public static void main(String[] args) {
                    int number = 10;
                    if (number > 0) {
                        System.out.println("Positive Number");
                    }
                }
            }

            Saída:
            Positive Number
    
            Você aprenderá mais sobre a instrução if no próximo capítulo.

        Instrução if-else
            A instrução if-else executa um bloco de código se uma condição for verdadeira e outro bloco de código se for falsa.

            Exemplo:
            public class IfElseExample {
                public static void main(String[] args) {
                    int number = -10;
                    if (number > 0) {
                        System.out.println("Positive Number");
                    } else {
                        System.out.println("Non-Positive Number");
                    }
                }
            }

            Saída:
            Non-Positive Number

            Você aprenderá mais sobre a instrução if-else no próximo capítulo.


        Escada if-else-if
            A escada if-else-if testa múltiplas condições sequencialmente, executando o bloco de código correspondente à primeira condição verdadeira.

            Exemplo:
            public class IfElseIfExample {
                public static void main(String[] args) {
                    int marks = 85;
                    if (marks >= 90) {
                        System.out.println("Grade A");
                    } else if (marks >= 75) {
                        System.out.println("Grade B");
                    } else {
                        System.out.println("Grade C");
                    }
                }
            }


            Saída:
            Grade B

            Você aprenderá mais sobre a escada if-else-if no próximo capítulo.


        Instrução if aninhada
            Uma instrução if aninhada usa uma instrução if dentro de outra instrução if para testar múltiplas condições.

            Exemplo:
            public class NestedIfExample {
                public static void main(String[] args) {
                    int number = 10;
                    if (number > 0) {
                        if (number % 2 == 0) {
                            System.out.println("Positive Even Number");
                        }
                    }
                }
            }

            Saída:
            Positive Even Number

            Você aprenderá mais sobre instruções if aninhadas no próximo capítulo.


        Instrução switch
            A instrução switch permite a seleção entre múltiplas opções com base no valor de uma expressão.

            Exemplo:
            public class SwitchExample {
                public static void main(String[] args) {
                    int day = 3;
                    switch (day) {
                        case 1:
                            System.out.println("Monday");
                            break;
                        case 2:
                            System.out.println("Tuesday");
                            break;
                        case 3:
                            System.out.println("Wednesday");
                            break;
                        default:
                            System.out.println("Invalid day");
                            break;
                    }
                }
            }

            Saída:
            Wednesday

            Você aprenderá mais sobre a instrução switch no próximo capítulo.


        2. Instruções de Loop
            Instruções de loop permitem a execução repetitiva de um bloco de código, desde que uma condição especificada permaneça verdadeira. Estas incluem:

            Loop while
            O loop while repete um bloco de código enquanto uma condição for verdadeira.

            Exemplo:
            public class WhileExample {
                public static void main(String[] args) {
                    int count = 0;
                    while (count < 3) {
                        System.out.println("Count: " + count);
                        count++;
                    }
                }
            }

            Saída:
            Count: 0
            Count: 1
            Count: 2
        
            Você aprenderá mais sobre o loop while no próximo capítulo.


            Laço do-while
                O laço do-while garante que o bloco de código seja executado pelo menos uma vez antes de verificar a condição.

                Exemplo:
                public class DoWhileExample {
                    public static void main(String[] args) {
                        int count = 0;
                        do {
                            System.out.println("Count: " + count);
                            count++;
                        } while (count < 3);
                    }
                }

                Saída:
                Count: 0
                Count: 1
                Count: 2


            Você aprenderá mais sobre o loop do-while no próximo capítulo.

            Laço for
                O laço for repete um bloco de código um número especificado de vezes, com inicialização, condição e incremento/decremento, tudo em um só lugar.

                Example:
                public class ForExample {
                    public static void main(String[] args) {
                        for (int i = 0; i < 3; i++) {
                            System.out.println("Iteration: " + i);
                        }
                    }
                }

                Saída:
                Iteration: 0
                Iteration: 1
                Iteration: 2

                Você aprenderá mais sobre o loop for no próximo capítulo.


            Loop for-each
                O loop for-each foi projetado especificamente para iterar sobre arrays e coleções, simplificando a sintaxe para iterar sobre elementos.

                Exemplo:
                public class ForEachExample {
                    public static void main(String[] args) {
                        int[] numbers = {1, 2, 3};
                        for (int num : numbers) {
                            System.out.println("Number: " + num);
                        }
                    }
                }

                Saída:
                Number: 1
                Number: 2
                Number: 3

                Você aprenderá mais sobre o loop for-ach no próximo capítulo.


            3. Instruções de Ramificação
                Instruções de ramificação alteram o fluxo de execução, transferindo o controle para outra parte do programa. Estas incluem:

                Instrução break
                A instrução break encerra um loop ou instrução switch prematuramente.

                    Exemplo:
                    public class BreakExample {
                        public static void main(String[] args) {
                            for (int i = 0; i < 5; i++) {
                                if (i == 3) {
                                    break;
                                }
                                System.out.println("Iteration: " + i);
                            }
                        }
                    }

                    Saída:
                    Iteration: 0
                    Iteration: 1
                    Iteration: 2

                    Você aprenderá mais sobre a instrução break no próximo capítulo.


                Instrução continue
                    A instrução continue ignora a iteração atual de um loop e prossegue com a próxima iteração.
                    Exemplo:
                    public class ContinueExample {
                        public static void main(String[] args) {
                            for (int i = 0; i < 5; i++) {
                                if (i == 3) {
                                    continue;
                                }
                                System.out.println("Iteration: " + i);
                            }
                        }
                    }

                    Saída:
                    Iteration: 0
                    Iteration: 1
                    Iteration: 2
                    Iteration: 4

                    Você aprenderá mais sobre a instrução continue no próximo capítulo.


                Instrução return
                    A instrução return sai do método atual e, opcionalmente, retorna um valor.

                    Exemplo:
                    public class ReturnExample {
                        public static void main(String[] args) {
                            System.out.println("Sum: " + add(10, 20));
                        }

                        public static int add(int a, int b) {
                            return a + b;
                        }
                    }

                    Saída:
                    Sum: 30

                    You will learn more about the return statement in the next chapter.


    Conclusão
        Instruções de fluxo de controle são os blocos de construção para escrever programas Java dinâmicos e responsivos. Elas permitem controlar o fluxo de execução com 
    base em condições, repetir ações e gerenciar lógicas complexas. Nos capítulos subsequentes, exploraremos cada tipo de instrução de fluxo de controle em detalhes, 
    fornecendo exemplos e práticas recomendadas para ajudá-lo a dominar seu uso em seus programas Java.


                


                
            
            
            

        
        
