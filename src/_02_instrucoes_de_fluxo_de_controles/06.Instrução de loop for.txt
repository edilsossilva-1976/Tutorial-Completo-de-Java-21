Estrutura de repetição FOR

Introdução
    O laço for é uma das instruções de fluxo de controle mais utilizadas em Java, permitindo executar um bloco de código um número específico de vezes. Ele é 
particularmente útil quando você sabe com antecedência quantas vezes precisa iterar. Neste capítulo, exploraremos como o laço for funciona, sua sintaxe e vários 
casos de uso com exemplos e comentários detalhados.


Como funciona o loop for

O loop for em Java consiste em três partes principais:

    *   Inicialização: 
        Executado uma vez no início do loop para inicializar a(s) variável(is) de controle do loop.

    *   Condição: 
        Avaliada antes de cada iteração. Se verdadeiro, o corpo do loop é executado; se falso, o loop termina.

    *   Atualização: 
        Executado após cada iteração para atualizar a(s) variável(is) de controle do loop.


O fluxo geral do loop for pode ser visualizado da seguinte forma:
Initialization
    |
    v
Condition -> True -> Execute Loop Body -> Update -> Condition
    |
    v
  False
    |
    v
  End Loop


Sintaxe
A sintaxe básica do loop for é a seguinte:

for (initialization; condition; update) {
    // code to be executed
}


Exemplo: Laço for básico

Vamos considerar um exemplo em que usamos o laço for para imprimir números de 1 a 5.

Código de exemplo:
public class ForExample {
    public static void main(String[] args) {
        // Initialize loop control variable i to 1
        // Loop continues as long as i <= 5
        // Increment i by 1 after each iteration
        for (int i = 1; i <= 5; i++) {
            // Print the current value of i
            System.out.println("Count: " + i);
        }
    }
}

Saída:
Count: 1
Count: 2
Count: 3
Count: 4
Count: 5


Caso de Uso: Soma dos Primeiros N Números Naturais

Calcule a soma dos primeiros n números naturais usando um loop for.

Código de Exemplo:
public class SumExample {
    public static void main(String[] args) {
        int n = 5; // Sum of first 5 natural numbers
        int sum = 0;

        // Loop from 1 to n
        for (int i = 1; i <= n; i++) {
            // Add the current value of i to sum
            sum += i;
        }

        // Print the calculated sum
        System.out.println("Sum of first " + n + " natural numbers is: " + sum);
    }
}

Saída:
Sum of first 5 natural numbers is: 15


Caso de Uso: Fatorial de um Número

Calcule o fatorial de um número usando um loop for.

Código de Exemplo:
public class FactorialExample {
    public static void main(String[] args) {
        int number = 5; // Factorial of 5
        long factorial = 1;

        // Loop from 1 to the number
        for (int i = 1; i <= number; i++) {
            // Multiply the current value of i with factorial
            factorial *= i;
        }

        // Print the calculated factorial
        System.out.println("Factorial of " + number + " is: " + factorial);
    }
}

Saída:
Factorial of 5 is: 120


Caso de Uso: Laço for aprimorado (laço for-each)

O laço for aprimorado, também conhecido como laço for-each, é usado para iterar sobre arrays e coleções.

Código de Exemplo:
public class ForEachExample {
    public static void main(String[] args) {
        // Array of integers
        int[] numbers = {1, 2, 3, 4, 5};

        // Enhanced for loop to iterate over the array
        for (int num : numbers) {
            // Print the current element of the array
            System.out.println("Number: " + num);
        }
    }
}

Saída:
Number: 1
Number: 2
Number: 3
Number: 4
Number: 5


Caso de Uso: Laço for aninhado

Um laço for pode ser aninhado dentro de outro laço for. Isso é útil para iterar em arrays multidimensionais ou realizar iterações complexas.

Código de Exemplo:
public class NestedForExample {
    public static void main(String[] args) {
        // Outer loop iterates from 1 to 3
        for (int i = 1; i <= 3; i++) {
            // Inner loop iterates from 1 to 3
            for (int j = 1; j <= 3; j++) {
                // Print the current values of i and j
                System.out.println("i: " + i + ", j: " + j);
            }
        }
    }
}

Saída:
i: 1, j: 1
i: 1, j: 2
i: 1, j: 3
i: 2, j: 1
i: 2, j: 2
i: 2, j: 3
i: 3, j: 1
i: 3, j: 2
i: 3, j: 3


Caso de Uso: Laço for Infinito

Um laço for pode se tornar um laço infinito se a condição de término não for especificada.

Código de Exemplo:
public class InfiniteForLoopExample {
    public static void main(String[] args) {
        // Infinite loop with no termination condition
        for (;;) {
            System.out.println("This is an infinite loop");
            // Uncomment the next line to break out of the loop
            // break;
        }
    }
}

Saída:
This is an infinite loop
... (continues indefinitely)


Caso de Uso: Usando break no Loop for

A instrução break pode ser usada para sair do loop prematuramente, independentemente da condição.

Código de Exemplo:
public class BreakInForLoopExample {
    public static void main(String[] args) {
        // Loop from 1 to 5
        for (int i = 1; i <= 5; i++) {
            // If i equals 3, exit the loop
            if (i == 3) {
                break;
            }
            // Print the current value of i
            System.out.println("Count: " + i);
        }
    }
}

Saída:
Count: 1
Count: 2


Caso de Uso: Usando continue no Loop for

A instrução continue ignora a iteração atual do loop e prossegue com a próxima iteração.

Código de Exemplo:
public class ContinueInForLoopExample {
    public static void main(String[] args) {
        // Loop from 1 to 5
        for (int i = 1; i <= 5; i++) {
            // If i equals 3, skip the rest of the loop body
            if (i == 3) {
                continue;
            }
            // Print the current value of i
            System.out.println("Count: " + i);
        }
    }
}

Saida:
Count: 1
Count: 2
Count: 4
Count: 5


Conclusão
    O loop for é uma instrução de fluxo de controle versátil em Java que permite iterar sobre um bloco de código um número especificado de vezes. Ao compreender a sintaxe 
e os vários casos de uso do loop for, incluindo o loop básico, o loop for-each aprimorado, o loop aninhado e como usar as instruções break e continue, você poderá escrever 
programas Java mais eficientes e flexíveis.