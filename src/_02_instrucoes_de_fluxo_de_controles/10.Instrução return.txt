Instrução return

Introdução
    A instrução return em Java é usada para sair do método atual e, opcionalmente, retornar um valor ao método chamador. É uma instrução fundamental de fluxo de 
controle que pode ajudar a controlar a execução de um programa, encerrando a execução de um método. Neste capítulo, exploraremos a sintaxe, o uso e os exemplos da 
instrução return em Java.


Sintaxe
A sintaxe básica da instrução return é a seguinte:
*   Para métodos que retornam um valor:
    retornar expression;

*   Para métodos void (sem valor de retorno):
    return;


Pontos Principais:
    *   A instrução return pode ser usada para sair de qualquer método.
    *   Para métodos que retornam um valor, a instrução return deve ser seguida por uma expressão que corresponda ao tipo de retorno do método.
    *   Para métodos void, a instrução return pode ser usada sozinha para sair do método.


Exemplo: Retornando um Valor de um Método a()

Vamos considerar um exemplo em que usamos a instrução return para retornar um valor de um método.

Código de exemplo:
public class ReturnExample {
    public static void main(String[] args) {
        int result = add(10, 20);
        System.out.println("Soma: " + result);
    }

    // Método que soma dois números e retorna o resultado
    public static int add(int a, int b) {
        return a + b;
    }
}

Saída:
Sum: 30


Exemplo: Usando return em Métodos void()

Vamos considerar um exemplo em que usamos a instrução return para sair de um método void.

Código de exemplo:
public class ReturnVoidExample {
    public static void main(String[] args) {
        checkAge(15);
        checkAge(20);
    }

    // Método que verifica se uma pessoa é adulta
    public static void checkAge(int age) {
        if (age < 18) {
            System.out.println("Você não é adulto.");
            return; // Sai do método se a idade for menor que 18 anos
        }
        System.out.println("Você é adulto.");
    }
}

Saída:
You are not an adult.
You are an adult.


Exemplo: Usando return para Sair Antecipadamente

A instrução return pode ser usada para sair de um método antecipadamente com base em condições específicas.

Código de Exemplo:
public class ReturnEarlyExample {
    public static void main(String[] args) {
        int number = 5;
        System.out.println("Factorial of " + number + " is: " + factorial(number));
        number = -3;
        System.out.println("Factorial of " + number + " is: " + factorial(number));
    }

    // Method to calculate the factorial of a number
    public static int factorial(int n) {
        if (n < 0) {
            System.out.println("Invalid input: " + n);
            return -1; // Exit the method early if the input is invalid
        }
        int result = 1;
        for (int i = 1; i <= n; i++) {
            result *= i;
        }
        return result;
    }
}

Saída:
Factorial of 5 is: 120
Invalid input: -3
Factorial of -3 is: -1


Exemplo: Retornando um Objeto

Vamos considerar um exemplo em que usamos a instrução return para retornar um objeto de um método.

Código de Exemplo:
public class ReturnObjectExample {
    public static void main(String[] args) {
        Person person = createPerson("Alice", 25);
        System.out.println("Name: " + person.getName() + ", Age: " + person.getAge());
    }

    // Method that creates and returns a Person object
    public static Person createPerson(String name, int age) {
        return new Person(name, age);
    }
}

// Person class with name and age attributes
class Person {
    private String name;
    private int age;

    // Constructor to initialize name and age
    public Person(String name, int age) {
        this.name = name;
        this.age = age;
    }

    // Getter methods for name and age
    public String getName() {
        return name;
    }

    public int getAge() {
        return age;
    }
}

Saída:
Name: Alice, Age: 25


Conclusão
    A instrução return é uma poderosa instrução de fluxo de controle em Java que permite sair de um método e, opcionalmente, retornar um valor para quem o chamou. 
Ela oferece flexibilidade no controle do fluxo de execução e pode ser usada para retornar valores, sair antecipadamente de métodos e lidar com condições especiais. 
Entender como usar a instrução return de forma eficaz pode ajudá-lo a escrever programas Java mais eficientes e legíveis.

