Strings


Introdução
    Strings em Java são objetos que representam sequências de caracteres. Elas são fundamentais para a programação Java e são amplamente 
utilizadas para armazenar e manipular texto. Strings em Java são imutáveis, o que significa que, uma vez criado, um objeto string não pode 
ser alterado. Neste capítulo, exploraremos os vários aspectos das strings em Java, incluindo declaração, inicialização, operações comuns e 
métodos de manipulação de strings.


Índice
    1.  O que é uma String?
    2.  Declaração e Inicialização
    3.  Comprimento de String
    4.  Operações Comuns com Strings
    5.  Comparação de Strings
    6.  Concatenação de Strings
    7.  Métodos de String
    8.  StringBuffer e StringBuilder
    9.  Natureza Imutável das Strings
    10. Programas Adicionais com Strings

1. O que é uma String?
    Uma string em Java é um objeto que representa uma sequência de caracteres. Ela é criada usando a classe String, que faz parte da biblioteca 
padrão Java. Strings são usadas para armazenar e manipular dados de texto.

2. Declaração e Inicialização
    Strings em Java podem ser declaradas e inicializadas de diversas maneiras. Os métodos mais comuns são usando literais de string e a palavra-chave 
new.


    Exemplo: Declaração e Inicialização

    Neste exemplo, demonstramos como declarar e inicializar strings usando literais de string e a palavra-chave new.
    
    public class StringExample {
        public static void main(String[] args) {
            // Declaration and initialization using string literal
            String str1 = "Hello";

            // Declaration and initialization using new keyword
            String str2 = new String("World");

            // Print the strings
            System.out.println("String 1: " + str1);
            System.out.println("String 2: " + str2);
        }
    }

    Saída:
    String 1: Hello
    String 2: World


3. Comprimento da String
    O comprimento de uma string pode ser determinado usando o método length(). Este método retorna o número de caracteres na string.


    Exemplo: Obtendo o Comprimento da String
    
    Neste exemplo, demonstramos como obter o comprimento de uma string usando o método length().

    public class StringLengthExample {
        public static void main(String[] args) {
            String str = "Hello, World!";
            // Get the length of the string
            int length = str.length();
            // Print the length
            System.out.println("Length of the string: " + length);
        }
    }

    Saída:
    Length of the string: 13


4. Operações Comuns com Strings
    
    Exemplo: Concatenação
    A concatenação de strings é o processo de unir duas ou mais strings. Isso pode ser feito usando o operador + ou o método concat().
    
    public class StringConcatenationExample {
        public static void main(String[] args) {
            String str1 = "Hello";
            String str2 = "World";
            // Concatenate the strings using the + operator
            String str3 = str1 + " " + str2;
            // Print the concatenated string
            System.out.println("Concatenated String: " + str3);
        }
    }

    Saída:
    Concatenated String: Hello World


    Exemplo: Substring
        O método substring() é usado para extrair parte de uma string. Ele recebe o índice inicial e, opcionalmente, o índice final para retornar 
    a substring.

    public class StringSubstringExample {
        public static void main(String[] args) {
            String str = "Hello, World!";
            // Get a substring from the string
            String subStr = str.substring(7, 12);
            // Print the substring
            System.out.println("Substring: " + subStr);
        }
    }

    Saída:
    Substring: World


Exemplo: Acesso a Caracteres
    O método charAt() é usado para acessar um caractere em um índice específico de uma string.

    public class StringCharAtExample {
        public static void main(String[] args) {
            String str = "Hello";

            // Acessar o caractere no índice 1
            char ch = str.charAt(1);

            // Imprimir o caractere
            System.out.println("Caractere no índice 1: " + ch);
        }
    }

    Saída:
    Character at index 1: e


5. Comparação de Strings
    A comparação de strings em Java pode ser feita usando o método equals() para comparação de conteúdo e o operador == para comparação de referência.

Exemplo: Método equals()
    O método equals() compara o conteúdo de duas strings e retorna verdadeiro se forem iguais, caso contrário, retorna falso.

    public class StringEqualsExample {
        public static void main(String[] args) {
            String str1 = "Olá";
            String str2 = "Olá";
            String str3 = "Mundo";

            // Compara strings usando o método equals()
            boolean isEqual1 = str1.equals(str2);
            boolean isEqual2 = str1.equals(str3);
        
            // Exibe os resultados da comparação
            System.out.println("str1 equals str2: " + isEqual1);
            System.out.println("str1 equals str3: " + isEqual2);
        }
    }

    Saída:
    str1 é igual a str2: verdadeiro
    str1 é igual a str3: falso



6. Concatenação de Strings
    A concatenação de strings pode ser realizada usando o operador + ou o método concat().

    Exemplo: Método concat()
        O método concat() une duas strings.

    public class StringConcatMethodExample {
        public static void main(String[] args) {
            String str1 = "Olá";
            String str2 = "Mundo";
        
            // Concatena as strings usando o método concat()
            String str3 = str1.concat(" ").concat(str2);
        
            // Exibe a string concatenada
            System.out.println("String Concatenada: " + str3);
        }
    }

    Saída:
    String Concatenada: Olá, Mundo


7. Métodos String()
    Java fornece vários métodos para manipulação de strings, incluindo toUpperCase(), toLowerCase(), trim(), replace() e outros.

    Exemplo: toUpperCase() e toLowerCase()
        O método toUpperCase() converte todos os caracteres de uma string para letras maiúsculas, enquanto o método toLowerCase() converte todos os caracteres para letras minúsculas.

    public class StringCaseExample {
        public static void main(String[] args) {
            String str = "Olá, Mundo!";
        
            // Converte para letras maiúsculas
            Str upperStr = str.toUpperCase();
        
            // Converte para letras minúsculas
            Str lowerStr = str.toLowerCase();
        
            // Exibe os resultados
            System.out.println("Maiúsculas: " + upperStr);
            System.out.println("Maiúsculas: " + lowerStr);
        }
    }

    Saída:
    Maiúsculas: OLÁ, MUNDO!
    Minúsculas: olá, mundo!


Exemplo: trim()
    O método trim() remove os espaços em branco à esquerda e à direita de uma string.

    public class StringTrimExample {
        public static void main(String[] args) {
            String str = " Olá, Mundo! ";
        
            // Remove os espaços em branco
            String trimmedStr = str.trim();
        
            // Exibe a string removida
            System.out.println("String removida: '" + trimmedStr + "'");
        }
    }

    Saída:
    String removida: 'Olá, Mundo!'


Exemplo: replace()
    O método replace() substitui ocorrências de um caractere ou substring especificado por outro caractere ou substring.

    public class StringReplaceExample {
        public static void main(String[] args) {
            String str = "Olá, Mundo!";
            
            // Substitui 'Mundo' por 'Java'
            String substituteStr = str.replace("Mundo", "Java");
            
            // Exibe a string substituída
            System.out.println("String Substituída: " + substituteStr);
        }
    }

    Saída:
    String Substituída: Olá, Java!


8. StringBuffer and StringBuilder
    StringBuffer and StringBuilder are classes used for creating mutable strings in Java. StringBuffer is thread-safe, while StringBuilder is not but is faster.

    Example: StringBuilder
    Using StringBuilder for efficient string manipulation.

    public class StringBuilderExample {
        public static void main(String[] args) {
            StringBuilder sb = new StringBuilder("Hello");
            
            // Append to the StringBuilder
            sb.append(" World");
        
            // Insert into the StringBuilder
            sb.insert(5, ",");
        
            // Reverse the StringBuilder
            sb.reverse();
        
            // Print the result
            System.out.println("StringBuilder: " + sb.toString());
        }
    }

    Saída:
    StringBuilder: dlroW ,olleH


9. Natureza Imutável das Strings
    Strings em Java são imutáveis, o que significa que, uma vez criada, não podem ser alteradas. Qualquer modificação em uma string resulta na criação de um novo objeto string.

    Exemplo: Imutabilidade
    Demonstrando a imutabilidade das strings.

    public class StringImmutabilityExample {
        public static void main(String[] args) {
            String str = "Olá";
        
            // Tenta alterar a string
            String newStr = str.concat("Mundo");
        
            // Exibe as strings original e nova
            System.out.println("String Original: " + str);
            System.out.println("Nova String: " + newStr);
        }
    }

    Saída:
    String Original: Olá
    Nova String: Olá Mundo


10. Programas Adicionais de String
    Exemplo: Verificando Palíndromo
    Um palíndromo é uma palavra, frase, número ou outra sequência de caracteres que pode ser lida da mesma forma de trás para frente 
(ignorando espaços, pontuação e uso de maiúsculas e minúsculas). Este programa verifica se uma determinada string é um palíndromo.

    public class PalindromeCheckExample {
        public static void main(String[] args) {
            String str = "madam";
            boolean isPalindrome = isPalindrome(str);
            if (isPalindrome) {
                System.out.println(str + " é um palíndromo.");
                } else {
                    System.out.println(str + " não é um palíndromo.");
                }
            }

            // Método para verificar se uma string é um palíndromo
            public static boolean isPalindrome(String str) {
                int start = 0;
                int end = str.length() - 1;
                while (start < end) {
                    if (str.charAt(start) != str.charAt(end)) {
                    return false;
                }
                start++;
                end--;
            }
            return true;
        }
    }

    Saída:
    madame é um palíndromo.


    Exemplo: Contagem de Vogais e Consoantes
        Este programa conta o número de vogais e consoantes em uma determinada string.

    public class VowelConsonantCountExample {
        public static void main(String[] args) {
            String str = "Olá, Mundo!";
            int[] counts = countVowelsAndConsonants(str);
            System.out.println("Número de vogais: " + counts[0]);
            System.out.println("Número de consoantes: " + counts[1]);
        }

        // Método para contar vogais e consoantes
        public static int[] countVowelsAndConsonants(String str) {
            int vowels = 0;
            int consonants = 0;
            str = str.toLowerCase();

            for (char ch : str.toCharArray()) {
                if (ch >= 'a' && ch <= 'z') {
                    if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u') {
                        vogais++;
                    } else {
                        consoantes++;
                    }
                }
            }

            return new int[]{vogais, consoantes};
        }
    }

    Saída:
    Número de vogais: 3
    Número de consoantes: 7


    Exemplo: Inverter uma String
        Este programa inverte uma string fornecida.

    public class ReverseStringExample {
        public static void main(String[] args) {
            String str = "Olá, Mundo!";
            String reversedStr = reverseString(str);
            System.out.println("String Invertida: " + reversedStr);
        }

        // Método para inverter uma string
        public static String reverseString(String str) {
            StringBuilder sb = new StringBuilder(str);
            return sb.reverse().toString();
        }
    }

    Saída:
    String Invertida: !dlroW ,olleH


Exemplo: Removendo Duplicatas de uma String
    Este programa remove caracteres duplicados de uma string.

    import java.util.LinkedHashSet;
    import java.util.Set;

    public class RemoveDuplicatesStringExample {
        public static void main(String[] args) {
            String str = "programming";
            String result = removeDuplicates(str);
            System.out.println("String após remover duplicatas: " + result);
        }

        // Método para remover caracteres duplicados de uma string
        public static String removeDuplicates(String str) {
            Set<Character> set = new LinkedHashSet<>();
            for (char ch : str.toCharArray()) {
                set.add(ch);
            }
            StringBuilder sb = new StringBuilder();
            for (char ch : set) {
                sb.append(ch);
            }
            return sb.toString();
        }
    }

    Saída:
    String após remover duplicatas: progamin


Exemplo: Convertendo uma string para maiúsculas e minúsculas
    Este programa demonstra a conversão de uma string para maiúsculas e minúsculas.

    public class StringCaseConversionExample {
        public static void main(String[] args) {
            String str = "Olá, Mundo!";
        
            // Converte para maiúsculas
            String upperStr = str.toUpperCase();
        
            // Converte para minúsculas
            String lowerStr = str.toLowerCase();
        
            // Exibe os resultados
            System.out.println("Maiúsculas: " + upperStr);
            System.out.println("Minúsculas: " + lowerStr);
        }
    }

    Saída:
    Maiúsculas: OLÁ, MUNDO!
    Minúsculas: olá, mundo!


Conclusão
    Strings em Java são uma estrutura de dados poderosa e versátil usada para armazenar e manipular texto. Entender como declarar, inicializar e manipular 
strings é fundamental para a programação Java. Aprendendo diversas operações com strings, como concatenação, extração de substrings, comparação e usando 
métodos de string integrados, você pode trabalhar com strings de forma eficiente em seus programas Java. Além disso, entender a natureza imutável das strings 
e usar StringBuffer ou StringBuilder para strings mutáveis ​​pode ajudá-lo a escrever código mais eficiente e legível.
