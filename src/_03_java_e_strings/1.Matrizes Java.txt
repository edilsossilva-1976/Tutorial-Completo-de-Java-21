Matrizes (arrays)

Introdução
    Um array (matriz) em Java é uma estrutura de dados que permite armazenar vários valores do mesmo tipo em uma única variável. Arrays são uma parte fundamental da 
programação Java e fornecem uma maneira de gerenciar grandes quantidades de dados com eficiência. Neste capítulo, exploraremos a sintaxe, o uso e os exemplos de arrays 
em Java.


Índice
1.  Declaração e Inicialização
2.  Acessando Elementos de um Array
3.  Iterando sobre Arrays
4.  Comprimento de um Array
5.  Arrays Multidimensionais
6.  Operações Comuns com Arrays
7.  Programas Adicionais com Arrays


1. Declaração e Inicialização

    Sintaxe
    Existem várias maneiras de declarar e inicializar um array em Java.

    Declaração
        dataType[] arrayName;

    Inicialização
        Você pode inicializar um array ao declará-lo ou separadamente.


    Declaração e Inicialização Combinadas:
        int[] números = {1, 2, 3, 4, 5};

    Declaração e Inicialização Separadas:
        int[] números;
        números = new int[5]; // Cria um array de inteiros com 5 elementos

    Inicialização com Valores:
        int[] números = new int[5];
        números[0] = 1;
        números[1] = 2;
        números[2] = 3;
        números[3] = 4;
        números[4] = 5;


    Exemplo: Declaração e Inicialização
    public class ArrayExample {
        public static void main(String[] args) {
            // Combined declaration and initialization
            int[] numbers = {1, 2, 3, 4, 5};

            // Separate declaration and initialization
            String[] fruits;
            fruits = new String[3];
            fruits[0] = "Apple";
            fruits[1] = "Banana";
            fruits[2] = "Cherry";
        }
    }



2. Acessando Elementos do Array
    Os elementos do array são acessados ​​usando seu índice, que começa em 0.

    Sintaxe
        arrayName[índice];


    Exemplo: Acessando Elementos
    public class AccessArrayExample {
        public static void main(String[] args) {
            int[] numbers = {1, 2, 3, 4, 5};
            // Access and print the first element
            System.out.println("First element: " + numbers[0]);
            // Access and print the second element
            System.out.println("Second element: " + numbers[1]);
        }
    }

    Saída:
    First element: 1
    Second element: 2


3. Iterando sobre Arrays
    Você pode iterar sobre arrays usando laços como for, while e for-each.

    Exemplo: Usando o Laço for
    public class ForLoopArrayExample {
        public static void main(String[] args) {
            int[] numbers = {1, 2, 3, 4, 5};

            // Iterar sobre o array usando um laço for
            for (int i = 0; i < numbers.length; i++) {
                // Imprime o elemento atual do array
                System.out.println("Elemento no índice " + i + ": " + numbers[i]);
            }
        }
    }

    Saída:
    Element at index 0: 1
    Element at index 1: 2
    Element at index 2: 3
    Element at index 3: 4
    Element at index 4: 5


    Exemplo: Usando o Loop for-each
    public class ForEachArrayExample {
        public static void main(String[] args) {
            int[] numbers = {1, 2, 3, 4, 5};

            // Iterar sobre o array usando um loop for-each
            for (int number : numbers) {
                // Imprime o elemento atual do array
                System.out.println("Number: " + number);
            }
        }
    }

    Saída:
    Number: 1
    Number: 2
    Number: 3
    Number: 4
    Number: 5


4. Comprimento do Array
    O comprimento de um array pode ser determinado usando a propriedade length.

    Exemplo: Comprimento do Array
    public class ArrayLengthExample {
        public static void main(String[] args) {
            int[] numbers = {1, 2, 3, 4, 5};
            // Exibe o comprimento do array
            System.out.println("Comprimento do array: " + numbers.length);
        }
    }

    Saída:
    Length of the array: 5



5. Matrizes Multidimensionais
    Java suporta matrizes multidimensionais, como matrizes 2D.

    Declaração e Inicialização
    int[][] matriz = {
        {1, 2, 3}, {4, 5, 6}, {7, 8, 9}
    };

    Exemplo: Acessando Elementos de uma Matriz 2D
    public class MultiDimensionalArrayExample {
        public static void main(String[] args) {
            int[][] matriz = {
                {1, 2, 3}, {4, 5, 6}, {7, 8, 9}
            };

            // Acessar e imprimir elementos da matriz 2D
            System.out.println("Elemento na linha 1, coluna 1: " + matrix[0][0]);
            System.out.println("Elemento na linha 2, coluna 3: " + matrix[1][2]);
        }
    }

    Saída:
    Element at row 1, column 1: 1
    Element at row 2, column 3: 6


    Exemplo: Iterando sobre um array 2D
    public class IterateMultiDimensionalArrayExample {
        public static void main(String[] args) {
            int[][] matrix = {
                {1, 2, 3}, {4, 5, 6}, {7, 8, 9}
            };

            // Iterar sobre o array 2D usando laços for aninhados
            for (int i = 0; i < matrix.length; i++) {
                for (int j = 0; j < matrix[i].length; j++) {
                    // Imprime o elemento atual do array 2D
                    System.out.println("Elemento na linha " + i + ", coluna " + j + ": " + matrix[i][j]);
                }
            }   
        }
    }

    Saída:
    Element at row 0, column 0: 1
    Element at row 0, column 1: 2
    Element at row 0, column 2: 3
    Element at row 1, column 0: 4
    Element at row 1, column 1: 5
    Element at row 1, column 2: 6
    Element at row 2, column 0: 7
    Element at row 2, column 1: 8
    Element at row 2, column 2: 9



6. Operações Comuns com Array

    Exemplo: Encontrando o Elemento Máximo
    public class MaxArrayExample {
        public static void main(String[] args) {
            int[] números = {1, 2, 3, 4, 5};
            int max = números[0];

            // Itera sobre o array para encontrar o elemento máximo
            for (int num : números) {
                if (num > max) {
                    max = num;
                }
            }

            // Imprime o elemento máximo
            System.out.println("Elemento máximo: " + max);
        }
    }

    Saída:
    Maximum element: 5


    Exemplo: Somando Elementos em um Array
    public class SumArrayExample {
        public static void main(String[] args) {
            int[] numbers = {1, 2, 3, 4, 5};
            int sum = 0;

            // Itera sobre o array para calcular a soma dos elementos
            for (int num : numbers) {
                sum += num;
            }

            // Imprime a soma dos elementos
            System.out.println("Soma dos elementos: " + sum);
        }
    }

    Saída:
    Sum of elements: 15



    Exemplo: Invertendo um Array
    public class ReverseArrayExample {
        public static void main(String[] args) {
            int[] números = {1, 2, 3, 4, 5};
            int length = números.length;

            // Itere sobre o array para invertê-lo
            for (int i = 0; i < length / 2; i++) {
                int temp = números[i];
                números[i] = números[comprimento - 1 - i];
                números[comprimento - 1 - i] = temp;
            }

            // Imprima o array invertido
            System.out.print("Array invertido: ");
            for (int num : números) {
                System.out.print(num + " ");
            }
        }
    }

    Saída:
    Reversed array: 5 4 3 2 1


7. Programas Adicionais de Array

    Exemplo: Verificando se um Array está Ordenado
    public class CheckSortedArrayExample {
        public static void main(String[] args) {
            int[] numbers = {1, 2, 3, 4, 5};

            // Método para verificar se o array está ordenado
            boolean isSorted = true;
            for (int i = 0; i < numbers.length - 1; i++) {
                if (numbers[i] > numbers[i + 1]) {
                    isSorted = false;
                    break;
                }
            }

            // Exibe se o array está ordenado ou não
            if (isSorted) {
                System.out.println("O array está ordenado.");
            } else {
                System.out.println("O array não está ordenado.");
            }
        }
    }

    Saída:
    The array is sorted.


    Exemplo: Mesclando Dois Arrays
    public class MergeArraysExample {
        public static void main(String[] args) {
            int[] array1 = {1, 3, 5};
            int[] array2 = {2, 4, 6};

            // Mesclar os dois arrays
            int[] mergedArray = new int[array1.length + array2.length];
            int index = 0;

            for (int i = 0; i < array1.length; i++) {
                mergedArray[index++] = array1[i];
            }

            for (int i = 0; i < array2.length; i++) {
                mergedArray[index++] = array2[i];
            }

            // Imprime o array mesclado
            System.out.print("Merged array: ");
            for (int num : mergedArray) {
                System.out.print(num + " ");
            }
        }
    }

    Saída:
    Merged array: 1 3 5 2 4 6


    Exemplo: Removendo Duplicatas de uma Matriz
    importar java.util.Arrays;

    public class RemoveDuplicatesArrayExample {
        public static void main(String[] args) {
            int[] números = {1, 2, 2, 3, 4, 4, 5};

            // Ordenar o array
            Arrays.sort(números);

            // Remover duplicatas
            int[] tempArray = new int[números.length];
            int j = 0;

            for (int i = 0; i < números.length - 1; i++) {
                if (números[i] != números[i + 1]) {
                    tempArray[j++] = números[i];
                }
            }
            tempArray[j++] = números[números.length - 1];

            // Cria um array com o novo comprimento
            int[] uniqueNumbers = Arrays.copyOf(tempArray, j);

            // Imprime o array sem duplicatas
            System.out.print("Array sem duplicatas: ");
            for (int num : uniqueNumbers) {
                System.out.print(num + " ");
            }
        }
    }

    Saída
    Array without duplicates: 1 2 3 4 5


    Exemplo: Encontrando o Segundo Maior Elemento em uma Matriz
    public class SecondLargestArrayExample {
        public static void main(String[] args) {
            int[] numbers = {1, 2, 3, 4, 5};

            // Method to find the second largest element
            int largest = Integer.MIN_VALUE;
            int secondLargest = Integer.MIN_VALUE;

            for (int num : numbers) {
                if (num > largest) {
                    secondLargest = largest;
                    largest = num;
                } else if (num > secondLargest && num != largest) {
                    secondLargest = num;
                }
            }

            // Print the second largest element
            System.out.println("Second largest element: " + secondLargest);
        }
    }

    Saída:
    Second largest element: 4


Conclusão
    Arrays em Java são uma estrutura de dados poderosa e versátil que permite armazenar e manipular múltiplos valores do mesmo tipo com eficiência. Entender como 
declarar, inicializar, acessar e iterar sobre arrays é fundamental para a programação Java. Além disso, saber como executar operações comuns com arrays, como encontrar 
o elemento máximo, somar elementos e inverter o array, aumentará sua capacidade de trabalhar com arrays de forma eficaz. Ao praticar com programas adicionais de array, 
você pode consolidar ainda mais sua compreensão e aprimorar suas habilidades de resolução de problemas.
