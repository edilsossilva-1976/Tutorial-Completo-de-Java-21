Operadores Bitwise (bit a bit) Java


Introdução
    Operadores bit a bit em Java são usados ​​para realizar operações em bits individuais de tipos de dados inteiros. Esses operadores são particularmente úteis 
em programação de baixo nível, como em programação de sistemas, algoritmos de criptografia e trabalho com dados binários. Java fornece vários operadores bit a bit 
que permitem manipular bits diretamente.

    Pontos Principais:
    *   Operação em Bits: Operadores bit a bit trabalham na representação binária de números.
    *   Aplicável a Tipos Inteiros: Esses operadores podem ser aplicados a tipos de dados como int, long, short, char e byte.
    *   Operações de Baixo Nível: Comumente usadas em cenários onde a manipulação direta de bits é necessária.


    Lista de Operadores Bit a Bit

    Java fornece os seguintes operadores bit a bit:
    |---------------------------------------------------------------------------------------------------------------------------------------|
    | Operator |                Descrição             | Exemplo |                           Saída                                           |  
    |---------------------------------------------------------------------------------------------------------------------------------------|
    |    &     |  Operador Bitwise AND (e)            |  a & b  | Executa uma operação AND bit a bit entre a e b                            |
    |---------------------------------------------------------------------------------------------------------------------------------------|
    |    |     |  Operador Bitwise OR (ou)            |  a || b | Executa uma operação OR bit a bit entre a e b                             |    
    |---------------------------------------------------------------------------------------------------------------------------------------|
    |    ^     |  Operador Bitwise XOR (ou exclusivo) |  a ^ b  | Executa uma operação XOR bit a bit entre a e b                            | 
    |---------------------------------------------------------------------------------------------------------------------------------------|
    |    ~     |  Operador Bitwise Complement         |   ~a    | Inverte os bits de a                                                      | 
    |---------------------------------------------------------------------------------------------------------------------------------------|
    |    <<    |  Deslocamento a esquerda             | a << 2  | Desloca os bits de a para a esquerda em 2 posições                        | 
    |---------------------------------------------------------------------------------------------------------------------------------------|
    |    >>    |  Deslocamento a direita              | a >> 2  | Desloca os bits de a para a direita em 2 posições                         | 
    |---------------------------------------------------------------------------------------------------------------------------------------|
    |   >>>    |  Deslocamento a direita sem sinal    | a >>> 2 | Desloca os bits de a para a direita em 2 posições, preenchendo com zeros  | 
    |---------------------------------------------------------------------------------------------------------------------------------------|


    Exemplos Detalhados de Operadores Bitwise
    Vamos explorar cada operador bitwise com exemplos.

    1. AND bitwise (&)
        O operador AND bitwise & compara cada bit de seus operandos. Se ambos os bits forem 1, o resultado será 1; caso contrário, o resultado será 0.

        public class BitwiseAndExample {
            public static void main(String[] args) {
                int a = 5;  // Binary: 0101
                int b = 3;  // Binary: 0011
                int result = a & b;  // Binary: 0001

                System.out.println("a & b: " + result);  // Output: a & b: 1
            }
        }    

        Explicação:
        Operação bit a bit: A operação "AND" bit a bit compara cada bit de a e b, resultando em 0001, que é 1 em decimal.

        Saída:
        a e b: 1

    2. OR bit a bit (|)
        O operador OR bit a bit | compara cada bit de seus operandos. Se qualquer um dos bits for 1, o resultado será 1; caso contrário, o resultado será 0.
    
        public class BitwiseOrExample {
            public static void main(String[] args) {
                int a = 5;  // Binary: 0101
                int b = 3;  // Binary: 0011
                int result = a | b;  // Binary: 0111

                System.out.println("a | b: " + result);  // Output: a | b: 7
            }
        }

        Explicação:
        Operação bit a bit: A operação OU bit a bit compara cada bit de a e b, resultando em 0111, que é 7 em decimal.

        Saída:
        a | b: 7


    3. XOR bit a bit (^)
        O operador XOR bit a bit (OU exclusivo) ^ compara cada bit de seus operandos. Se os bits forem diferentes, o resultado é 1; se forem iguais, o resultado é 0.
        public class BitwiseXorExample {
            public static void main(String[] args) {
                int a = 5;  // Binary: 0101
                int b = 3;  // Binary: 0011
                int result = a ^ b;  // Binary: 0110

                System.out.println("a ^ b: " + result);  // Output: a ^ b: 6
            }
        }

        Explicação:
        Operação bit a bit: A operação XOR bit a bit compara cada bit de a e b, resultando em 0110, que é 6 em decimal.

        Saída:
        a ^ b: 6

    
    4. Complemento Bitwise (~)
        O operador de complemento bitwise ~ inverte os bits de seu operando. Cada 0 se torna 1 e cada 1 se torna 0.
        public class BitwiseComplementExample {
            public static void main(String[] args) {
                int a = 5;  // Binary: 0101
                int result = ~a;  // Binary: 1010 (in 32-bit signed integer representation)

                System.out.println("~a: " + result);  // Output: ~a: -6
            }
        }

        Explicação:
        Operação de complemento bit a bit: 
            A operação de complemento bit a bit inverte os bits de a. Em uma representação inteira com sinal de 32 bits, ~0101 se torna 1010, que é -6 em decimal devido à 
        representação de complemento de dois.
            
        Saída:
        ~a: -6


    5. Deslocamento à Esquerda (<<)
        O operador de deslocamento à esquerda << desloca os bits de seu operando para a esquerda pelo número especificado de posições. Zeros são adicionados à direita.
        public class LeftShiftExample {
            public static void main(String[] args) {
                int a = 5;  // Binary: 0101
                int result = a << 2;  // Binary: 10100

                System.out.println("a << 2: " + result);  // Output: a << 2: 20
            }
        }

        Explicação:
        Operação Bitwise: A operação de deslocamento à esquerda desloca os bits de a (0101) duas posições para a esquerda, resultando em 10100, que é 20 em decimal.

        Saída:
        a << 2: 20

    
    6. Deslocamento à Direita (>>)
        O operador de deslocamento à direita >> desloca os bits de seu operando para a direita pelo número especificado de posições. Os bits mais à esquerda são preenchidos 
    com o bit de sinal (0 para números positivos, 1 para números negativos).

        public class RightShiftExample {
            public static void main(String[] args) {
                int a = 20;  // Binary: 10100
                int result = a >> 2;  // Binary: 0101

                System.out.println("a >> 2: " + result);  // Output: a >> 2: 5
            }
        }

        Explicação:
        Operação Bitwise: A operação de deslocamento à direita desloca os bits de a (10100) duas posições para a direita, resultando em 0101, que é 5 em decimal.
        
        Saída:
        a >> 2: 5


    7. Deslocamento à direita sem sinal (>>>)
        O operador de deslocamento à direita sem sinal >>> desloca os bits de seu operando para a direita pelo número especificado de posições. Zeros são adicionados à 
    esquerda, independentemente do sinal do número.

        public class UnsignedRightShiftExample {
            public static void main(String[] args) {
                int a = -20;  // Binary (32-bit signed): 11111111111111111111111111101100
                int result = a >>> 2;  // Binary: 00111111111111111111111111111011

                System.out.println("a >>> 2: " + result);  // Output: a >>> 2: 1073741819
            }
        }

        Explicação:
        Operação Bitwise: A operação de deslocamento à direita sem sinal desloca os bits de a (111111111111111111111111111101100) duas posições para a direita, resultando em 001111111111111111111111111111011, que é 1073741819 em decimal.
        
        Saída:
        a >>> 2: 1073741819


Conclusão
    Os operadores bit a bit do Java permitem a manipulação direta de bits, tornando-os úteis para tarefas de programação de baixo nível. Esses operadores podem ser usados 
​​para otimizar o desempenho, realizar cálculos em nível de bits e trabalhar com dados binários.

    Resumo:
    *   AND (&) bit a bit: 
        Compara cada bit de dois operandos e retorna 1 se ambos os bits forem 1.

    *   OR (|) bit a bit: 
        Compara cada bit de dois operandos e retorna 1 se qualquer um dos bits for 1.

    *   OR (^) bit a bit: 
        Compara cada bit de dois operandos e retorna 1 se os bits forem diferentes.

    *   Complemento (~) bit a bit: 
        Inverte os bits do operando.

    *   Deslocamento à esquerda (<<): 
        Desloca os bits para a esquerda, preenchendo os bits mais à direita com zeros.

    *   Deslocamento à direita (>>): 
        Desloca os bits para a direita, preenchendo os bits mais à esquerda com o bit de sinal (0 para números positivos, 1 para números negativos).

    *   Deslocamento à direita sem sinal (>>>): 
        desloca os bits para a direita, preenchendo os bits mais à esquerda com zeros, independentemente do sinal do número.

